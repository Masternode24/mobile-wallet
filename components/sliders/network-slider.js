// Generated by LiveScript 1.6.0
import React, {Component} from "react";
import {Platform, StatusBar, View} from "react-native";
import styles from "../../Styles";
import getPrimaryInfo from  "../../wallet/get-primary-info";
import icons from '../../wallet/icons.js';
import tokenNetworks from '../../wallet/swapping/networks.js'
import {map, find, each, objToPairs, filter, pairsToObj} from 'prelude-ls';
import {Input} from "native-base";


  export default ({store, web3t, wallet}) => {
    var wallets, availableNetworks, networkLabels, getNetworkById, style, style2, inputStyle2, buttonPrimary2Style, displayValue, go, goback, goForw, children;
    if (!(store.current.send.isSwap != null && store.current.send.isSwap === true)) {
      return null;
    }
    if (wallet.network.networks == null || Object.keys(wallet.network.networks).length === 0) {
      return null;
    }
		/* If it is Swap! */
		if (wallet.network.networks != null && store.current.send.isSwap === true) {
			availableNetworks = pairsToObj(
					filter(function(it){
						return it[1].disabled == null || it[1].disabled === false;
					})(
							objToPairs(
									wallet.network.networks)));
			let walletSwapNetworksIds = Object.keys(availableNetworks);
			if (walletSwapNetworksIds.length > 0) {
				let defaultNetwork = wallet.network.networks[walletSwapNetworksIds[0]];
				store.current.send.chosenNetwork = defaultNetwork;
				store.current.send.to = tokenNetworks.getDefaultRecipientAddress(store);
			} else {
				console.error("networks prop in " + store.current.send.token + " wallet is defined but is empty");
			}
		}
    wallets = pairsToObj(
    map(function(it){
      return [it.coin.token, it];
    })(
    store.current.account.wallets));
    availableNetworks = pairsToObj(
    filter(function(it){
      return wallets[it[1].referTo] != null && (it[1].disabled == null || it[1].disabled === false);
    })(
    objToPairs(
    wallet.network.networks)));
    networkLabels = Object.keys(availableNetworks);
    getNetworkById = function(id){
      return availableNetworks[id + ""];
    };

    displayValue = store.current.send.chosenNetwork.name.toUpperCase();
    go = function(inc){
      return function(){
        var current, lenght, index, chosenNetworkId;
        current = networkLabels.indexOf(store.current.send.chosenNetwork.id);
        lenght = networkLabels.length;
        index = current + inc;
        if (current + inc >= lenght) {
          index = 0;
        } else if (current + inc < 0) {
          index = lenght - 1;
        }
        chosenNetworkId = networkLabels[index];
        store.current.send.chosenNetwork = getNetworkById(chosenNetworkId);
        store.current.send.to = tokenNetworks.getDefaultRecipientAddress(store);
        store.current.send.error = '';
        return store.current.send.data = null;
      };
    };
    goback = go(-1);
    goForw = go(1);

	return (
	  <View style={styles.container}>
		
		<Input
			disabled={true}
			returnKeyType="done"
			selectionColor={"#fff"}
			keyboardAppearance="dark"
			placeholder={wallet.network.mask.substring(25, wallet.network.mask.length - 255 ) + "..."}
			style={[styles.inputStyle, { fontSize: 18 }]}
			value={displayValue}
			placeholderTextColor="rgba(255,255,255,0.60)"
		/>	  
	  </View> 
	)
	
  }

